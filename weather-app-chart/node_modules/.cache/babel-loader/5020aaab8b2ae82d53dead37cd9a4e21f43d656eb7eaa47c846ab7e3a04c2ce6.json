{"ast":null,"code":"var _jsxFileName = \"D:\\\\0. Acadmic stuff\\\\CSE '21\\\\PERSONAL\\\\CSB_Hackathon\\\\weather-app-chart\\\\src\\\\components\\\\WeatherChart.js\",\n  _s = $RefreshSig$();\n// src/components/WeatherChart.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherChart = ({\n  placeId\n}) => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/point', {\n          params: {\n            place_id: placeId,\n            sections: 'all',\n            timezone: 'auto',\n            language: 'en',\n            units: 'metric'\n          }\n        });\n        setWeatherData(response.data);\n      } catch (error) {\n        console.error('Error fetching weather data', error);\n      }\n    };\n    if (placeId) {\n      fetchWeatherData();\n    }\n  }, [placeId]);\n  if (!weatherData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 30\n  }, this);\n  const chartData = {\n    labels: weatherData.hourly.map(hour => hour.timestamp),\n    datasets: [{\n      label: 'Temperature',\n      data: weatherData.hourly.map(hour => hour.temperature),\n      borderColor: 'rgba(75, 192, 192, 1)',\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Weather Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(WeatherChart, \"BCUo9muHyxrqajg6diFxqqqjG/A=\");\n_c = WeatherChart;\nexport default WeatherChart;\nvar _c;\n$RefreshReg$(_c, \"WeatherChart\");","map":{"version":3,"names":["React","useState","useEffect","axios","Line","jsxDEV","_jsxDEV","WeatherChart","placeId","_s","weatherData","setWeatherData","fetchWeatherData","response","get","params","place_id","sections","timezone","language","units","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","chartData","labels","hourly","map","hour","timestamp","datasets","label","temperature","borderColor","fill","_c","$RefreshReg$"],"sources":["D:/0. Acadmic stuff/CSE '21/PERSONAL/CSB_Hackathon/weather-app-chart/src/components/WeatherChart.js"],"sourcesContent":["// src/components/WeatherChart.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst WeatherChart = ({ placeId }) => {\r\n    const [weatherData, setWeatherData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchWeatherData = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:5000/api/point', {\r\n                    params: {\r\n                        place_id: placeId,\r\n                        sections: 'all',\r\n                        timezone: 'auto',\r\n                        language: 'en',\r\n                        units: 'metric',\r\n                    },\r\n                });\r\n\r\n                setWeatherData(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching weather data', error);\r\n            }\r\n        };\r\n\r\n        if (placeId) {\r\n            fetchWeatherData();\r\n        }\r\n    }, [placeId]);\r\n\r\n    if (!weatherData) return <div>Loading...</div>;\r\n\r\n    const chartData = {\r\n        labels: weatherData.hourly.map(hour => hour.timestamp),\r\n        datasets: [\r\n            {\r\n                label: 'Temperature',\r\n                data: weatherData.hourly.map(hour => hour.temperature),\r\n                borderColor: 'rgba(75, 192, 192, 1)',\r\n                fill: false,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Weather Data</h2>\r\n            <Line data={chartData} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeatherChart;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACZ,MAAMU,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,iCAAiC,EAAE;UAChEC,MAAM,EAAE;YACJC,QAAQ,EAAER,OAAO;YACjBS,QAAQ,EAAE,KAAK;YACfC,QAAQ,EAAE,MAAM;YAChBC,QAAQ,EAAE,IAAI;YACdC,KAAK,EAAE;UACX;QACJ,CAAC,CAAC;QAEFT,cAAc,CAACE,QAAQ,CAACQ,IAAI,CAAC;MACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACvD;IACJ,CAAC;IAED,IAAId,OAAO,EAAE;MACTI,gBAAgB,CAAC,CAAC;IACtB;EACJ,CAAC,EAAE,CAACJ,OAAO,CAAC,CAAC;EAEb,IAAI,CAACE,WAAW,EAAE,oBAAOJ,OAAA;IAAAkB,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE9C,MAAMC,SAAS,GAAG;IACdC,MAAM,EAAEpB,WAAW,CAACqB,MAAM,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,SAAS,CAAC;IACtDC,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,aAAa;MACpBf,IAAI,EAAEX,WAAW,CAACqB,MAAM,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACI,WAAW,CAAC;MACtDC,WAAW,EAAE,uBAAuB;MACpCC,IAAI,EAAE;IACV,CAAC;EAET,CAAC;EAED,oBACIjC,OAAA;IAAAkB,QAAA,gBACIlB,OAAA;MAAAkB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBtB,OAAA,CAACF,IAAI;MAACiB,IAAI,EAAEQ;IAAU;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEd,CAAC;AAACnB,EAAA,CA/CIF,YAAY;AAAAiC,EAAA,GAAZjC,YAAY;AAiDlB,eAAeA,YAAY;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}